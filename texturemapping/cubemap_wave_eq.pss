//Host code (EVAL)

enum{colSize=128, rowSize=colSize}
enum{NUM_VERTS = colSize*rowSize}

// Mesh vertices & normals
// creating this on cpu is demanding...
static vertx[NUM_VERTS];
static verty[NUM_VERTS];
static vertz[NUM_VERTS];

static vertnx[NUM_VERTS];
static vertny[NUM_VERTS];
static vertnz[NUM_VERTS];

// ----------------- Wave Eq
enum{bufWidth=colSize}
static heights[bufWidth*bufWidth];
static deriv[bufWidth*bufWidth];
static oldx,oldy;

static t;
static cubeSizeLoc;
static camPosLoc;

static camx,camy,camz;
static plane_y = -10;
static plane_scale = 60;
static rain = 1; // try 1
static mx,my;
()
{
 if (numframes==0){
      glsettex(0,"buddha.jpg");
      setWaterShader();
      camPosLoc = glGetUniformLoc("camPos");

      setCubeShader();
      cubeSizeLoc = glGetUniformLoc("cubeSize");
 }   

 t = klock();
 r = -45.1; //10
 ang = pi/2;//mousx/xres*2*PI;
 camx = r*cos(ang);
 camy = 10.0; //2.0 + (0.5+.5*cos(.5*t))*35.0;
 camz = r*sin(ang);
 gluLookAt(camx,camy,camz,
                0,plane_y,0,
                0,1,0);


   glCullFace(GL_FRONT);   
   skybox();
   wave_eq();

   glCullFace(GL_BACK); 
   // Draw a cube so we know were mouse is
    setCubeShader();
   glUniform1f(cubeSizeLoc, 2.);
   glBegin(GL_POINTS);
      glVertex( -0.5*plane_scale + plane_scale*mx, plane_y, -0.5*plane_scale + plane_scale*my);
   glEnd();

   setWaterShader();
   glCullFace(GL_NONE);
   waterMesh();
}

setCubeShader() {
   glsetshader("passthru","geo_cube","frag_skybox");
}
setWaterShader() {
   glsetshader("transform", "refract");
}

wave_eq()
{
   mx = (xres-mousx)/xres; 
   my = (yres-mousy)/yres;

   spd=.5*sqrt( (mx-oldx)^2+(my-oldy)^2 );
   oldx=mx; oldy=my;

   setHeight=sin(20*t);
    
  if(numframes==0){
    for(i=0;i<bufWidth*bufWidth;i++) { heights[i] = .0; deriv[i] = .0; }
  }

   if ( rain ) {
      if ( rnd > 0.9 ) {
         rain_x = int( 1+(bufWidth-2)*rnd);
         rain_y = int( 1+(bufWidth-2)*rnd);
         heights[rain_y*bufWidth+rain_x] = setHeight;
      }
   }

   imx = int(bufWidth*mx); 
   imy = int(bufWidth*my);  

   if(bstatus)
   if (imx>0 && imx<bufWidth-1)
   if (imy>0 && imy<bufWidth-1)
   {
      if(bstatus==1)
      heights[imx*bufWidth+imy] = setHeight;
      if(bstatus==2)
      heights[imx*bufWidth+imy] += 1.5;
   }

   for(i=0; i<bufWidth*bufWidth; i++){
      heights[i] += deriv[i];
         heights[i] *= 0.95;
   }

   for(offset=1; offset<NUM_VERTS-bufWidth-1; offset++)
   {
      avg = (heights[offset+1] + heights[offset-1] + heights[offset+bufWidth] + heights[offset-bufWidth]) * .25; 
      deriv[offset] -= 0.5 * (heights[offset]-avg);
   }
}

skybox()
{
   setCubeShader();
   glUniform1f(cubeSizeLoc, 1000.);
   glBegin(GL_POINTS);
   glVertex(0,0,0);
   glEnd();
}

norm_vert(i)
{
   yofs = plane_y + verty[i];
   glColor(yofs,yofs,yofs);
   glNormal( vertnx[i], vertny[i], vertnz[i] );
   glVertex( vertx[i], yofs, vertz[i] );
}

waterMesh()
{
   glUniform3f(camPosLoc, camx,camy,camz);
   glcullface(GL_NONE);

   idx = 0;
   xstart = -0.5*plane_scale;
   zstart = -0.5*plane_scale;
   for(i=0; i<colSize; i++)
   for(j=0; j<rowSize; j++)
   {
      vertx[idx] = xstart+plane_scale*i/colSize;
      verty[idx] = heights[idx];
      vertz[idx] = zstart+plane_scale*j/rowSize;
      idx++;
   }

   MeshNormalize();

   glBegin(GL_QUADS);
   for(i=0; i<colSize-1; i++)
   for(j=0; j<rowSize-1; j++)
   {
      idx = i * colSize + j;
      norm_vert( idx+rowSize );
      norm_vert( idx+rowSize+1 );
      norm_vert( idx+1 );
      norm_vert( idx );
   }
   glEnd();
}

// Described 
// here: http://www.riemers.net/eng/Tutorials/XNA/Csharp/ShortTuts/Normal_generation.php
// here: https://sites.google.com/site/dlampetest/python/calculating-normals-of-a-triangle-mesh-using-numpy
// and best expl here: http://iquilezles.org/www/articles/normals/normals.htm
MeshNormalize()
{
  for( i=0; i<NUM_VERTS; i++) {
    vertnx[i] = 0;
    vertny[i] = 0;
    vertnz[i] = 0;
  }

   // For each point, calculate normal using 2 neighbours
   for(i=1; i<colSize-1; i++)
   for(j=1; j<rowSize-1; j++)
   {
    idx = i * colSize + j;
    e1x = vertx[idx] - vertx[idx+rowSize];
    e1y = verty[idx] - verty[idx+rowSize];
    e1z = vertz[idx] - vertz[idx+rowSize];

    e2x = vertx[idx+rowSize+1] - vertx[idx+rowSize];
    e2y = verty[idx+rowSize+1] - verty[idx+rowSize];
    e2z = vertz[idx+rowSize+1] - vertz[idx+rowSize];

    nx=0; ny=0; nz=0;
    veccross(nx,ny,nz, e1x,e1y,e1z, e2x,e2y,e2z);
    vecadd( idx, nx,ny,nz );
  }

  for(i=0; i<NUM_VERTS; i++) {
    normalize( i );
  }
}

veccross(&x,&y,&z, x1,y1,z1,x2,y2,z2)
{
   x = y1*z2 - z1*y2;
   y = z1*x2 - x1*z2;
   z = x1*y2 - y1*x2;
}

vecadd(i,nx,ny,nz){
   vertnx[i]+=nx;
   vertny[i]+=ny;
   vertnz[i]+=nz;
}

normalize(i)
{
   rlen = 1.0/sqrt( vertnx[i]^2 + vertny[i]^2 + vertnz[i]^2 );
   vertnx[i] *=rlen;
   vertny[i] *=rlen;
   vertnz[i] *=rlen;
}

@v:transform //================================ TRANSFORM IT!
#version 120

varying out vec3 vPos;
varying out vec3 normal;
varying out vec4 vColor;

void main ()
{
   gl_Position = ftransform();
   vPos = gl_Vertex.xyz;
   normal = gl_Normal.xyz;
   vColor = gl_Color;
}

@v:passthru //================================ Passthru vertex
#version 120

varying out vec4 vColor;
void main ()
{
   gl_Position = gl_Vertex;
   vColor = normalize(gl_Color);
}

// input:lines
// output: triangle strip
// primCount

//layout(lines) in; // points/lines/LINES_ADJACENCY/TRIANGLES/TRIANGLES_ADJACENCY
//layout(triangle_strip) out; //  points, line_strip, and triangle_strip
//layout(max_vertices = 12) out;

// 6 faces * 4 pr face = 24 primitives generated
@g,GL_POINTS,GL_TRIANGLE_STRIP,24:geo_cube
#version 120
#extension GL_EXT_geometry_shader4 : enable

//varying in vec4 vColor[];

varying out vec3 texcoord;
varying out vec3 normal;
//varying out vec4 gColor;

uniform float cubeSize;

void face(vec3 a, vec3 d)
{ 
   vec3 b = a;
   vec3 c = a;
  if (a.y == d.y) {
    c.z = d.z; 
    b.x = d.x;
  } else {
    b.y = d.y;
    c.xz = d.xz;
  }
  mat4 mvp = gl_ModelViewProjectionMatrix;

float sc = cubeSize;
  normal = normalize( cross( b-a, b-c ) );
  //gColor = vColor[0];
   texcoord = a; gl_Position = mvp * (vec4(gl_PositionIn[0].xyz+sc*a, 1)); EmitVertex();
   texcoord = b; gl_Position = mvp * (vec4(gl_PositionIn[0].xyz+sc*b, 1)); EmitVertex();
   texcoord = c; gl_Position = mvp * (vec4(gl_PositionIn[0].xyz+sc*c, 1)); EmitVertex();
   texcoord = d; gl_Position = mvp * (vec4(gl_PositionIn[0].xyz+sc*d, 1)); EmitVertex();
  EndPrimitive();   
}

void main()
{
// l r b t n f
// face expects 2 opposite corners in the same plane

   face( +vec3(-.5,-.5,-.5),  +vec3(-.5,+.5,+.5) ); // +x
   face( +vec3(+.5,-.5,+.5),  +vec3(+.5,+.5,-.5) ); // -x

   face( +vec3(-.5,-.5,+.5), +vec3(+.5,-.5,-.5) ); // bottom
   face( -vec3(-.5,-.5,-.5), -vec3(+.5,-.5,+.5) ); // top

   face( +vec3(+.5,-.5,-.5), +vec3(-.5,+.5,-.5) ); //front
   face( -vec3(-.5,-.5,-.5), -vec3(+.5,+.5,-.5) ); //back
}

@f:frag_skybox //================================
#version 120

varying vec3 v;
varying vec3 texcoord;
varying vec3 normal;
varying vec4 gColor;
uniform samplerCube tex0;
void main ()
{
   //gl_FragColor = vec4(.5+.5*texcoord,1);
   //gl_FragColor = vec4( mix(vec3(intensity),gColor.xyz,.25),1); //vec3(.8,.1,.1)
   gl_FragColor = textureCube(tex0, texcoord );
}

@f:refract
#version 120

uniform vec3 camPos;
varying vec3 vPos;
varying vec3 normal;
varying vec4 vColor;
uniform samplerCube tex0;

void main(){
// Refract technique from humus.name water example
  vec3 viewVec = normalize(vPos - camPos); // could be done in vertshader or geo.
  vec4 refl = textureCube(tex0, reflect(viewVec, normal) ) * 0.9;
  vec4 refr = textureCube(tex0, refract(viewVec, normal, 0.85) );
  vec4 waterColor = vec4(0.6,0.7,0.8,1);
//  gl_FragColor = refr+refl * waterColor;
  gl_FragColor = mix(refl,refr, -dot(viewVec,normal) );
}